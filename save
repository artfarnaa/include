/*
    sprintf(path, "/srv/http/Fundamentals/%s.txt", exchange);
    fundamental* fundamentals = get_fundamental(path, fsize, errors);
    if(!fundamentals)
    {
        push_message(errors, 0, 0, 1, __FILE__, __FUNCTION__, __LINE__, "bad path - %s", path);
        return;
    }

    int tsize;
    sprintf(path, "/srv/http/Technicals/%s.txt", exchange);
    technical* technicals = get_technical(path, tsize, errors);
    if(!technicals)
    {
        push_message(errors, 0, 0, 1, __FILE__, __FUNCTION__, __LINE__, "bad path - %s", path);
        return;
    }


        const fundamental* fundfind = (fundamental*) bsearch(names[n],
                                      fundamentals, fsize, sizeof(fundamental), compare_fundamentals);
        if(!fundfind)
        {
            push_message(errors, 0, 0, 1, __FILE__, __FUNCTION__, __LINE__, "bad name - %s", names[n]);
            continue;
        }

        const technical* techfind = (technical*) bsearch(names[n],
                                    technicals, tsize, sizeof(technical), compare_technicals);
        if(!techfind)
        {
            push_message(errors, 0, 0, 1, __FILE__, __FUNCTION__, __LINE__, "bad name - %s", names[n]);
            continue;
        }
        write(fd, fundfind, sizeof(fundamental));
        write(fd, techfind, sizeof(technical));

fundamental* get_fundamental(const char* const path, int& size, node<message*>** errors)
{
    /*
    Symbol  Name    Sector  Industry    PE  EPS DivYield    Shares  DPS PEG PtS PtB
    AA.P    Alcoa Inc Pf 3.75   Capital Goods   Metal Fabrications  0   0   0   0   0   0   0   0
    AADR    BNY Mellon Focused Growth ADR ETF           0   0   0.34    0   0.128   0   0   0
    AAMC    Altisource Asset            0   -0.024  0   2351286 0   0   0   790.72
    */

    size_t len = 0;
    ssize_t read;
    char tmp[loki.NAMESIZE];

    char* line = get_string_from_file(path, errors);
    if(!line)
        return;

    fundamental* t = (fundamental*) malloc(sizeof(fundamental) * MAX_EXCHANGE_SYMBOLS);
    fundamental* ft = t;

    while(*line != '\r' && *(line + 1) != '\n')
        ++line;
    ++line;
    ++line;

    while(*line != '\0')
    {
        char* str = line;

        while(*line != '\t') ++line;
        strncpy(t->symbol, str, line - str);
        ++line;

        str = line;
        while(*line != '\t') ++line;
        strncpy(t->name, str, line - str);
        ++line;

        str = line;
        while(*line != '\t') ++line;
        strncpy(t->sector, str, line - str);
        ++line;

        str = line;
        while(*line != '\t') ++line;
        strncpy(t->industry, str, line - str);
        ++line;

        str = line;
        while(*line != '\t') ++line;
        strncpy(t->pe, str, line - str);
        ++line;

        str = line;
        while(*line != '\t') ++line;
        strncpy(t->eps, str, line - str);
        ++line;

        str = line;
        while(*line != '\t') ++line;
        strncpy(t->divyield, str, line - str);
        ++line;

        str = line;
        while(*line != '\t') ++line;
        strncpy(t->shares, str, line - str);
        ++line;

        str = line;
        while(*line != '\t') ++line;
        strncpy(t->dps, str, line - str);
        ++line;

        str = line;
        while(*line != '\t') ++line;
        strncpy(t->peg, str, line - str);
        ++line;

        str = line;
        while(*line != '\t') ++line;
        strncpy(t->pts, str, line - str);
        ++line;

        str = line;
        while(*line != '\r') ++line;
        strncpy(t->ptb, str, line - str);
        ++line;
        ++line;

        t++;
    }

    size = t - ft;
    return ft;
}

technical* get_technical(const char* const path, int& size, node<message*>** errors)
{
    /*
    Symbol  Previous    Change  VolumeChange    WeekHigh    WeekLow WeekChange  AvgWeekChange   AvgWeekVolume   MonthHigh   MonthLow    MonthChange AvgMonthChange  AvgMonthVolume  YearHigh    YearLow YearChange  AvgYearChange   AvgYearVolume   MA5 MA20    MA50    MA100   MA200   RSI14   STO9    WPR14   MTM14   ROC14   PTC
    AA.P    78.9    0   -2100   79.03   76.6    2.3 0   1233    79.03   74.94   3.96    0.198   1070    99.44   70.03   -11.1   -0.0275 1592    78  78  77  76  83  61.5446 81.4553 100 1.41    1.0182  0
    AADR    37.54   0.14    1000    37.69   37.3    0.25    0   1750    38.01   36.95   0.47    0.0165  3638    38.99   31.25   4.47    0.0185  4987    37  37  37  36  35  60.1834 65.8736 100 0.39    1.0105  0
    AAMC    1178    -26.77  -17900  1200.36 1125.01 -45.13  0   31150   1209    865.62  249.23  13.8    20038   0   0   0   0   0   1175    1023    909 0   0   80.0257 88.4276 84.1777 228.08  1.2471  0
    */

    size_t len = 0;
    ssize_t read;
    char tmp[loki.NAMESIZE];

    char* line = get_string_from_file(path, errors);
    if(!line)
        return;

    technical* t = (technical*) malloc(sizeof(technical) * MAX_EXCHANGE_SYMBOLS);
    technical* ft = t;

    while(*line != '\r' && *(line + 1) != '\n')
        ++line;
    ++line;
    ++line;

    while(*line != '\0')
    {
        char* str = line;
        while(*line != '\t') ++line;
        strncpy(t->symbol, str, line - str);
        ++line;

        str = line;
        while(*line != '\t') ++line;
        strncpy(t->previous, str, line - str);
        ++line;

        str = line;
        while(*line != '\t') ++line;
        strncpy(t->change, str, line - str);
        ++line;

        str = line;
        while(*line != '\t') ++line;
        strncpy(t->volumechange, str, line - str);
        ++line;

        str = line;
        while(*line != '\t') ++line;
        strncpy(t->weekhigh, str, line - str);
        ++line;

        str = line;
        while(*line != '\t') ++line;
        strncpy(t->weeklow, str, line - str);
        ++line;

        str = line;
        while(*line != '\t') ++line;
        strncpy(t->weekchange, str, line - str);
        ++line;

        str = line;
        while(*line != '\t') ++line;
        strncpy(t->avgweekchange, str, line - str);
        ++line;

        str = line;
        while(*line != '\t') ++line;
        strncpy(t->avgweekvolume, str, line - str);
        ++line;

        str = line;
        while(*line != '\t') ++line;
        strncpy(t->monthhigh, str, line - str);
        ++line;

        str = line;
        while(*line != '\t') ++line;
        strncpy(t->monthlow, str, line - str);
        ++line;

        str = line;
        while(*line != '\t') ++line;
        strncpy(t->monthchange, str, line - str);
        ++line;

        str = line;
        while(*line != '\t') ++line;
        strncpy(t->avgmonthchange, str, line - str);
        ++line;

        str = line;
        while(*line != '\t') ++line;
        strncpy(t->avgmonthvolume, str, line - str);
        ++line;

        str = line;
        while(*line != '\t') ++line;
        strncpy(t->yearhigh, str, line - str);
        ++line;

        str = line;
        while(*line != '\t') ++line;
        strncpy(t->yearlow, str, line - str);
        ++line;

        str = line;
        while(*line != '\t') ++line;
        strncpy(t->yearchange, str, line - str);
        ++line;

        str = line;
        while(*line != '\t') ++line;
        strncpy(t->avgyearchange, str, line - str);
        ++line;

        str = line;
        while(*line != '\t') ++line;
        strncpy(t->avgyearvolume, str, line - str);
        ++line;

        str = line;
        while(*line != '\t') ++line;
        strncpy(t->ma5, str, line - str);
        ++line;

        str = line;
        while(*line != '\t') ++line;
        strncpy(t->ma20, str, line - str);
        ++line;

        str = line;
        while(*line != '\t') ++line;
        strncpy(t->ma50, str, line - str);
        ++line;

        str = line;
        while(*line != '\t') ++line;
        strncpy(t->ma100, str, line - str);
        ++line;

        str = line;
        while(*line != '\t') ++line;
        strncpy(t->ma200, str, line - str);
        ++line;

        str = line;
        while(*line != '\t') ++line;
        strncpy(t->rsi14, str, line - str);
        ++line;

        str = line;
        while(*line != '\t') ++line;
        strncpy(t->sto9, str, line - str);
        ++line;

        str = line;
        while(*line != '\t') ++line;
        strncpy(t->wpr14, str, line - str);
        ++line;

        str = line;
        while(*line != '\t') ++line;
        strncpy(t->mtm14, str, line - str);
        ++line;

        str = line;
        while(*line != '\t') ++line;
        strncpy(t->roc14, str, line - str);
        ++line;

        str = line;
        while(*line != '\r') ++line;
        strncpy(t->ptc, str, line - str);
        ++line;
        ++line;

        t++;
    }

    size = t - ft;
    return ft;
}

*/


inline void command_line(int args, char** argv,
                  option* options, int optionsn, void* user_data, node<message*>** errors)
{
    int n = 1;
    for(; n < (int) args; ++n)
    {
        int m = 0;
        for(; m < optionsn; ++m)
        {
            option* o = &options[m];
            char shortname[3];
            shortname[0] = '-';
            shortname[1] = o->short_name;
            shortname[2] = '\0';
            char longname[OPTION_NAME + 2];
            strcpy(longname, "--");
            strcat(longname, o->name);
            if(strcmp(argv[n], shortname) && strcmp(argv[n], longname))
                continue;

            if(o->arg == option_type::system)
            {
                option_user a = {options, optionsn, user_data};
                (* (option_callback2) o->arg_data)(
                    o->name, argv[n + 1], (void*)&a, errors);
                n++;
                break;
            }
            else if(o->arg == option_type::system &&
                    o->flags & OPTION_FLAG_NO_ARG)
            {
                option_user a = {options, optionsn, user_data};
                (* (option_callback2) o->arg_data)(
                    o->name, NULL, (void*)&a, errors);
                break;
            }
            else if(o->arg == option_type::decimal && (n != (args - 1)))
            {
                *(float**)o->arg_data = (float*)malloc(sizeof(float));
                float val = atof(argv[n + 1]);
                memcpy(*(float**)o->arg_data, &val, sizeof(float));
                n++;
                break;
            }
            else if(o->arg == option_type::string && (n != (args - 1)))
            {
                *(char**)o->arg_data = (char*)malloc(sizeof(char) * strlen(argv[n + 1]));
                strcpy(*(char**)o->arg_data, argv[n + 1]);
                n++;
                break;
            }
            else if(o->arg == option_type::flag)
            {
                *(int**)o->arg_data = (int*)malloc(sizeof(int));
                break;
            }
            else if(o->arg == option_type::integer && (n != (args - 1)))
            {
                *(int**)o->arg_data = (int*)malloc(sizeof(int));
                int val = atoi(argv[n + 1]);
                memcpy(*(int**)o->arg_data, &val, sizeof(int));
                n++;
                break;
            }
            else if(o->arg == option_type::callback &&
                    o->flags & OPTION_FLAG_NO_ARG)
            {
                (* (option_callback2) o->arg_data)(
                    o->name, NULL, user_data, errors);
                break;
            }
            else if(o->arg == option_type::callback &&
                    o->flags & OPTION_FLAG_DUAL_ARG &&
                    (n != (args - 2)))
            {
                (* (option_callback2) o->arg_data)(
                    argv[n + 1], argv[n + 2], user_data, errors);

                n += 2;
                break;
            }
            else if(o->arg == option_type::callback &&
                    o->flags & OPTION_FLAG_TRIP_ARG &&
                    (n != (args - 3)))
            {
                (* (option_callback3) o->arg_data)(
                    argv[n + 1], argv[n + 2], argv[n + 3], user_data, errors);
                n += 3;
                break;
            }
            else if(n != (args - 1))
            {
                (* (option_callback2) o->arg_data)(
                    o->name, argv[n + 1], user_data, errors);
                n++;
                break;
            }
        }

        if(is_fatal(errors))
            return false;

        if(m == optionsn)
        {
            push_message(errors, 0, 0, 1, __FILE__, __FUNCTION__, __LINE__, "invalid option - %s", argv[n]);
            return false;
        }
    }
}

inline void echo_version(const char* a, const char* b, void*, node<message*>**)
{
    fprintf(stdout, "%s %d.%d.%d\n", APPLICATION, MAJORVERSION, MINORVERSION, PATCHVERSION);
    fprintf(stdout, "%s\n", WEBSITE);
    fprintf(stdout, "%s\n", COPYRIGHT);
    fprintf(stdout, "%s\n", SUMMARY);
    fprintf(stdout, "%s\n", USAGE);
    fprintf(stdout, "%s\n", EXAMPLE);
    exit(EXIT_SUCCESS);
}

inline void echo_help(const char*, const char*, void* user_data, node<message*>** errors)
{
    const options_t* o = (options_t*) user_data;
    fprintf(stdout, "%s %d.%d.%d\n", APPLICATION, MAJORVERSION, MINORVERSION, PATCHVERSION);
    fprintf(stdout, "%s\n", WEBSITE);
    fprintf(stdout, "%s\n", COPYRIGHT);
    fprintf(stdout, "%s\n", SUMMARY);
    fprintf(stdout, "%s\n", USAGE);
    fprintf(stdout, "%s\n\n", EXAMPLE);
    fprintf(stdout, "Options:\n");
    for(int m = 0; m < o->size; ++m)
    {
        const option* option = &o->data[m];
        if(option->flags & OPTION_FLAG_HIDDEN)
            continue;

        int args = 1;
        if(option->flags & OPTION_FLAG_NO_ARG)
            args = 0;
        else if(option->flags & OPTION_FLAG_DUAL_ARG)
            args = 2;

        fprintf(stdout, "%30s %2c  %s. %s (%d)\n", option->name,
                option->short_name ? option->short_name : ' ',
                option->description, option->arg_description, args);
    }

    exit(EXIT_SUCCESS);
}

inline void abort(const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    vfprintf(stderr, fmt, args);
    exit(1);
}

inline unsigned char* load_binary(const char* path, int* size, node<message*>** errors)
{
    int fd = open(path, O_RDONLY);
    if(fd == -1)
    {
        push_message(errors, 0, 0, 1, __FILE__, __FUNCTION__, __LINE__,
                     "error: %s, %s", path, strerror(errno));
        return 0;
    }

    struct stat file_info;
    if(fstat(fd, &file_info) == -1)
    {
        push_message(errors, 0, 0, 1, __FILE__, __FUNCTION__, __LINE__,
                     "error: %s, %s", path, strerror(errno));
        close(fd);
        return 0;
    }

    if(!S_ISREG(file_info.st_mode))
    {
        push_message(errors, 0, 0, 1, __FILE__, __FUNCTION__, __LINE__,
                     "Invalid path: %s", path);
        close(fd);
        return 0;
    }

    unsigned char* buffer = (unsigned char*)malloc(file_info.st_size + 1);
    if(!buffer)
    {
        push_message(errors, 0, 0, 1, __FILE__, __FUNCTION__, __LINE__, "bad memory: %s", path);
        close(fd);
        return 0;
    }

    read(fd, buffer, file_info.st_size);
    close(fd);

    if(size)
        *size = file_info.st_size;

    return buffer;
}


inline int compare_color(const void* pkey, const void* pelem)
{
    const char* key = (char*) pkey;
    const color* clr = (color*) pelem;
    return strcmp(key, clr->name);
}

inline int sort_colors(const void* x, const void* y)
{
    const color* xx = (color*) x;
    const color* yy = (color*) y;
    return strcmp(xx->name, yy->name);
}

inline void convertToUpperCase(char* str)
{
    int ch, i;
    for(i = 0; i < strlen(str); i++)
    {
        ch = toupper(str[i]);
        str[i] = ch;
    }
}

inline image* get_subimage(const image* const img, int x, int y, int width, int height)
{
    image* out = (image*)malloc(sizeof(image));
    out->width = width;
    out->height = height;
    out->channels = img->channels;
    out->data = (unsigned char*) malloc(width * height * img->channels);

    unsigned char* odata = img->data + (y * img->width * img->channels) + (x * out->channels);
    unsigned char* hdata = out->data;

    for(int k = 0; k < height; ++k)
    {
        memcpy(hdata, odata, width * img->channels);
        hdata += width * img->channels;
        odata += img->width * img->channels;
    }

    return out;
}

inline image* get_subimage(const image* img, rectangle rect)
{
    return get_subimage(img, rect.x, rect.y, rect.width, rect.height);
}

inline char** get_folder_paths(const char* path, const char* pattern, int type, int& filesn)
{
    DIR* dir;
    if(!(dir = opendir(path)))
        return 0;

    char** files = 0;
    struct dirent* ent;
    while((ent = readdir(dir)))
    {
        if(ent->d_type != type)
            continue;

        if(!strcmp(pattern, "*") ||
                !fnmatch(pattern, ent->d_name, 0))
        {
            char fpath[MAX_PATH];
            sprintf(fpath, "%s/%s", path, ent->d_name);

            files = (char**) realloc(files, sizeof(char*) * (filesn + 1));
            files[filesn] = (char*) malloc(strlen(fpath));
            strcpy(files[filesn], fpath);
            filesn++;
        }
    }

    closedir(dir);
    return files;
}

inline void* lsearchz(void* key, void* base, int n, int elemsize, int (funct)(void*, void*))
{
    for(int i = 0; i < n; ++i)
    {
        void* elemaddr = (char*)base + i * elemsize;
        if(!funct(key, elemaddr))
            return elemaddr;
    }

    return 0;
}

inline int strcmpz(const char** x, const char** y)
{
    return (strcmp(*x, *y));
}

inline char* load_file(const char* pathf, ...)
{
    char* path = NULL;
    va_list args;
    va_start(args, pathf);
    vasprintf(&path, pathf, args);
    va_end(args);

    int fd = open(path, O_RDONLY);
    if(fd == -1)
        return 0;

    struct stat file_info;
    fstat(fd, &file_info);
    if(!S_ISREG(file_info.st_mode))
    {
        close(fd);
        return 0;
    }

    int size = sizeof(char) * file_info.st_size;
    char* str = (char*)malloc(size + 1);
    read(fd, str, size);
    str[size] = '\0';
    close(fd);
    return str;
}

inline char** load_file_lines(const char* const path, int& n)
{
    char* str;
    if(!(str = load_file(path)))
        return 0;

    char** pstr = tokenizer(str, '\n', n, PARSE_SKIPBLANKS | PARSE_SKIPCOMMENTS);
    free(str);
    return pstr;
}

inline void command_line(int args, char** argv,
                         option* options, int optionsn, void* user_data, node<message*>** errors);
void echo_version(const char* a, const char* b, void*, node<message*>**);
void echo_help(const char*, const char*, void* user_data, node<message*>** errors);
void abort(const char* fmt, ...);
unsigned char* load_binary(const char* path, int* size, node<message*>** errors);

template <typename type_t> inline
type_t* get_array(node<type_t>* head, int* size_)
{
    int size = count_nodes(head);
    type_t* out = (type_t*)malloc(sizeof(type_t) * size);
    *size_ = size;
    int n = 0;
    while(head)
    {
        node<type_t>* next = head->next;
        out[n++] = head->data;
        head = next;
    }
    return out;
}

inline int free_messages(node<message*>* head)
{
    int messagesn = 0;
    for(node<message*>* msg = head; msg; ++messagesn)
    {
        node<message*>* save = msg;
        msg = msg->next;
        free(save->data->message);
        free(save->data);
        free(save);
    }

    return messagesn;
}

int echo_messages(node<message*>* head, FILE* file = stderr);


static const unsigned int               PARSE_SKIPBLANKS = 0x1 << 1;//2
static const unsigned int               PARSE_SKIPCOMMENTS = 0x1 << 2;//4

inline int next_token(const char** start, const char** end, char delim)
{
    if(!*end)
        *end = *start;
    else if(!** end)
        return 0;
    else
        *start = ++*end;
    while(**end &&** end != delim)
        ++*end;
    return 1;
}

inline char** tokenizer(const char* string, char delim, int& size, int options = 0)
{
    const char* start = string;
    const char* end = NULL;
    char** data = 0;
    size = 0;
    int n = 0;
    while(next_token(&start, &end, delim))
    {
        int ts = end - start;

        if(options & PARSE_SKIPBLANKS && ts == 0)
            continue;

        if(options & PARSE_SKIPCOMMENTS && start[0] == '#')
            continue;

        data = (char**) realloc(data, sizeof(char*) * (size + 1));
        data[size] = (char*) malloc(sizeof(char) * (ts + 1));
        strncpy(data[size], start, ts);
        data[size][ts] = '\0';
        size++;
    }
    return data;
}

inline unsigned char* memreplicate(unsigned char* buffer, int size, int extent)
{
    unsigned char* out = 0;
    if(!(out = (unsigned char*) calloc(1, extent)))
        return 0;
    unsigned char* hout = out;
    int b = extent / size;
    for(int m = 0; m < b; ++m, out += size)
        memcpy(out, buffer, size);
    int r = extent - (out - hout);
    memcpy(out, buffer, r);
    return hout;
}

template <typename type_t> inline
type_t* load_buffer(const char* path, int& size)
{
    int fd = open(path, O_RDONLY);
    if(fd == -1)
        return 0;

    read(fd, &size, sizeof(int));
    type_t* buffer = (type_t*) malloc(sizeof(type_t) * size);
    read(fd, buffer, sizeof(type_t) * size);
    close(fd);
    return buffer;
}

template <typename type_t> inline
void save_buffer(const char* path, const type_t* type, int typen, node<message*>** errors)
{
    int fd = open(path, O_WRONLY | O_CREAT, S_IRGRP | S_IWGRP | S_IWUSR | S_IRUSR | S_IROTH);
    if(fd == -1)
    {
        push_message(errors, 0, 0, 1, __FILE__, __FUNCTION__, __LINE__, "bad path - %s", path);
        return;
    }

    write(fd, &typen, sizeof(int));
    write(fd, type, typen * sizeof(type_t));
    close(fd);
}

inline bool is_fatal(node<message*>** in)
{
    node<message*>* head = *in;
    while(head)
    {
        node<message*>* next = head->next;
        message* data = head->data;
        if(data->fatal)
            return true;
        head = next;
    }

    return false;
}

inline void echo_string(node<char*>* head, FILE* file = stderr)
{
    while(head)
    {
        node<char*>* next = head->next;
        fprintf(file, "%s\n", head->data);
        head = next;
    }
}

inline void echo_string(node<char*>* head, int fd)
{
    static const char* eol = "\n";

    while(head)
    {
        node<char*>* next = head->next;
        write(fd, head->data, strlen(head->data));
        write(fd, eol, strlen(eol));
        head = next;
    }
}


typedef void (*option_callback2)(const char*, const char*, void*, node<message*>**);
typedef void (*option_callback3)(const char*, const char*, const char*, void*, node<message*>**);

inline void push_tail(node<char*>** a, const char* format, ...)
{
    node<char*>* n = (node<char*>*)calloc(1, sizeof(node<char*>));
    if(*a)
        (*a)->next = n;
    va_list args;
    va_start(args, format);
    vasprintf(&n->data, format, args);
    va_end(args);
    *a = n;
}

inline void push_head(node<char*>** a, const char* format, ...)
{
    node<char*>* n = (node<char*>*)malloc(sizeof(node<char*>));
    n->next = *a;
    va_list args;
    va_start(args, format);
    vasprintf(&n->data, format, args);
    va_end(args);
    *a = n;
}

inline int writef(int fd, const char* format, ...)
{
    va_list args;
    va_start(args, format);
    char* str = 0;
    vasprintf(&str, format, args);
    va_end(args);
    return write(fd, str, strlen(str));
}

template <typename type_t, typename key_t> inline
type_t binary_search(type_t begin, int size, key_t key, int (funct)(key_t, type_t))
{
    type_t end = begin + size;
    while(begin < end)
    {
        int n = (end - begin) / 2.0;
        const type_t type = begin + n;
        int result = funct(key, type);
        if(result == 0)
            return type;
        else if(result > 0)
            begin = type + 1;
        else
            end = type;
    }
    return 0;
}

inline void push_tail(queue<char*>* q, const char* format, ...)
{
    va_list args;
    va_start(args, format);
    char* str = 0;
    vasprintf(&str, format, args);
    va_end(args);
    if(!q->head)
    {
        push_tail(&q->head, str);
        q->tail = q->head;
    }
    else
    {
        push_tail(&q->tail, str);
    }
}

template <typename type_t>
inline node<type_t>* push_tail(queue<type_t>* q)
{
    node<type_t>* n = (node<type_t>*)calloc(1, sizeof(node<type_t>));
    if(!q->tail)
    {
        q->head = n;
        q->tail = n;
    }
    else
    {
        q->tail->next = n;
        q->tail = n;
    }
    return n;
}

inline char* combstr(const char* format, ...)
{
    char* str = NULL;
    va_list args;
    va_start(args, format);
    vasprintf(&str, format, args);
    va_end(args);
    int size = strlen(str);
    char* buffer = 0;
    if(!(buffer = (char*)malloc(size + 1)))
        return NULL;
    memcpy(buffer, str, size);
    buffer[size] = 0;
    return buffer;
}

typedef void (*option_callback2)(const char*, const char*, void*, node<message*>**);
typedef void (*option_callback3)(const char*, const char*, const char*, void*, node<message*>**);

inline void push_tail(node<char*>** a, const char* format, ...)
{
    node<char*>* n = (node<char*>*)calloc(1, sizeof(node<char*>));
    if(*a)
        (*a)->next = n;
    va_list args;
    va_start(args, format);
    vasprintf(&n->data, format, args);
    va_end(args);
    *a = n;
}

inline void push_head(node<char*>** a, const char* format, ...)
{
    node<char*>* n = (node<char*>*)malloc(sizeof(node<char*>));
    n->next = *a;
    va_list args;
    va_start(args, format);
    vasprintf(&n->data, format, args);
    va_end(args);
    *a = n;
}

inline int writef(int fd, const char* format, ...)
{
    va_list args;
    va_start(args, format);
    char* str = 0;
    vasprintf(&str, format, args);
    va_end(args);
    return write(fd, str, strlen(str));
}

template <typename type_t, typename key_t> inline
type_t binary_search(type_t begin, int size, key_t key, int (funct)(key_t, type_t))
{
    type_t end = begin + size;
    while(begin < end)
    {
        int n = (end - begin) / 2.0;
        const type_t type = begin + n;
        int result = funct(key, type);
        if(result == 0)
            return type;
        else if(result > 0)
            begin = type + 1;
        else
            end = type;
    }
    return 0;
}

inline void push_tail(queue<char*>* q, const char* format, ...)
{
    va_list args;
    va_start(args, format);
    char* str = 0;
    vasprintf(&str, format, args);
    va_end(args);
    if(!q->head)
    {
        push_tail(&q->head, str);
        q->tail = q->head;
    }
    else
    {
        push_tail(&q->tail, str);
    }
}

template <typename type_t>
inline node<type_t>* push_tail(queue<type_t>* q)
{
    node<type_t>* n = (node<type_t>*)calloc(1, sizeof(node<type_t>));
    if(!q->tail)
    {
        q->head = n;
        q->tail = n;
    }
    else
    {
        q->tail->next = n;
        q->tail = n;
    }
    return n;
}

inline char* combstr(const char* format, ...)
{
    char* str = NULL;
    va_list args;
    va_start(args, format);
    vasprintf(&str, format, args);
    va_end(args);
    int size = strlen(str);
    char* buffer = 0;
    if(!(buffer = (char*)malloc(size + 1)))
        return NULL;
    memcpy(buffer, str, size);
    buffer[size] = 0;
    return buffer;
}

